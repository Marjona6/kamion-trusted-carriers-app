{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_CARRIER_STARTED, UPDATE_CARRIER_STARTED, GET_CARRIER_LIST_STARTED } from './types';\nimport { addCarrierError, addCarrierSuccess, getCarrierListError, getCarrierListSuccess, updateCarrierError, updateCarrierSuccess } from './actions';\nimport { BASE_URL } from '../../config';\n\nfunction* getCarriersTask(action) {\n  const {\n    payload\n  } = action;\n  const {\n    token,\n    page = 1\n  } = payload;\n\n  try {\n    const response = yield call(axios.get, `${BASE_URL}/api/shipper/carrier?page=${page}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    yield put(getCarrierListSuccess(response.data));\n  } catch (e) {\n    console.log(e);\n    yield put(getCarrierListError(e));\n  }\n}\n\nfunction* addCarrierTask(action) {\n  const {\n    payload\n  } = action;\n  const {\n    token,\n    formData\n  } = payload;\n\n  try {\n    const response = yield call(axios.post, `${BASE_URL}/api/shipper/carrier`, formData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    const {\n      data\n    } = response;\n    yield put(addCarrierSuccess(data));\n  } catch (e) {\n    console.log(e);\n    yield put(addCarrierError(e));\n  }\n}\n\nfunction* updateCarrierTask(action) {\n  const {\n    payload\n  } = action;\n  const {\n    token,\n    formData,\n    carrierId\n  } = payload;\n\n  try {\n    const response = yield call(axios.post, `${BASE_URL}/api/shipper/update-carrier/${carrierId}`, formData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    const {\n      data\n    } = response;\n    yield put(updateCarrierSuccess(data));\n  } catch (e) {\n    console.log(e);\n    yield put(updateCarrierError(e));\n  }\n}\n\nfunction* watchGetCarriers() {\n  yield takeLatest(GET_CARRIER_LIST_STARTED, getCarriersTask);\n}\n\nfunction* watchAddCarrier() {\n  yield takeLatest(ADD_CARRIER_STARTED, addCarrierTask);\n}\n\nfunction* watchUpdateCarrier() {\n  yield takeLatest(UPDATE_CARRIER_STARTED, updateCarrierTask);\n}\n\nexport default function* saga() {\n  yield all([watchGetCarriers(), watchAddCarrier(), watchUpdateCarrier()]);\n}","map":null,"metadata":{},"sourceType":"module"}